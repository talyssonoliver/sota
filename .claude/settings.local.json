{
  "permissions": {
    "allow": [
      "Bash(pip3 install:*)",
      "Bash(python3 -m pip install:*)",
      "Bash(ls:*)",
      "Bash(source:*)",
      "Bash(python -m pytest -v --tb=short)",
      "Bash(.venv/Scripts/python.exe -m pytest -v --tb=short)",
      "Bash(.venv/Scripts/python.exe -m pytest -v --tb=short -x)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git config:*)",
      "Bash(git push:*)",
      "Bash(.venv/Scripts/python.exe:*)",
      "Bash(find:*)",
      "Bash(powershell:*)",
      "Bash(set PYTHONIOENCODING=utf-8)",
      "Bash(grep:*)",
      "Bash(mkdir:*)",
      "Bash(rm:*)",
      "Bash(python:*)",
      "Bash(pip install:*)",
      "Bash(/usr/bin/python3 -m pip install:*)",
      "Bash(PYTHONPATH=/mnt/c/taly/ai-system python3 tests/run_tests.py)",
      "Bash(TESTING=1 python3 -c \"\nimport sys\nsys.path.append('.')\nimport os\nos.environ['TESTING'] = '1'\n\ntry:\n    from tools.memory import get_answer, get_relevant_context, get_context_by_keys\n    print('✓ Memory imports successful')\nexcept ImportError as e:\n    print(f'✗ Memory import failed: {e}')\n    import traceback\n    traceback.print_exc()\n\ntry:\n    from tools.memory.engine import MemoryEngine\n    print('✓ MemoryEngine import successful')  \nexcept ImportError as e:\n    print(f'✗ MemoryEngine import failed: {e}')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(__NEW_LINE__ echo \"\")",
      "Bash(PYTHONPATH=/mnt/c/taly/ai-system python3 tests/test_updated_retrieval_qa.py)",
      "Bash(TESTING=1 PYTHONPATH=/mnt/c/taly/ai-system python3 tests/test_updated_retrieval_qa.py)",
      "Bash(TESTING=1 PYTHONPATH=/mnt/c/taly/ai-system python3 tests/test_memory_functionality.py)",
      "Bash(TESTING=1 PYTHONPATH=/mnt/c/taly/ai-system python3 tests/simple_retrieval_test.py)",
      "Bash(TESTING=1 PYTHONPATH=/mnt/c/taly/ai-system python3 -c \"\n# Test the get_answer function directly\nfrom tools.memory import get_answer\nfrom unittest.mock import patch, MagicMock\n\nprint('Testing get_answer function...')\n\nwith patch('tools.memory.factory.get_memory_instance') as mock_get_memory:\n    mock_memory = MagicMock()\n    mock_memory.retrieval_qa.return_value = 'Test response'\n    mock_get_memory.return_value = mock_memory\n    \n    # Call get_answer\n    result = get_answer('test question')\n    print(f'Result: {result}')\n    print(f'retrieval_qa called: {mock_memory.retrieval_qa.called}')\n    print(f'retrieval_qa call count: {mock_memory.retrieval_qa.call_count}')\n    \n    if mock_memory.retrieval_qa.called:\n        print(f'retrieval_qa called with: {mock_memory.retrieval_qa.call_args}')\n    else:\n        print('retrieval_qa was NOT called')\n        # Check what methods were called\n        print(f'All method calls: {mock_memory.method_calls}')\n\")",
      "Bash(TESTING=1 PYTHONPATH=/mnt/c/taly/ai-system python3 -c \"\nfrom tools.memory.factory import get_answer\nfrom unittest.mock import patch, MagicMock\n\nprint('Testing get_answer with detailed debugging...')\n\nwith patch('tools.memory.factory.get_memory_instance') as mock_get_memory:\n    mock_memory = MagicMock()\n    mock_memory.retrieval_qa.return_value = 'Test response'\n    mock_get_memory.return_value = mock_memory\n    \n    print('Mock setup complete')\n    print(f'Mock memory has retrieval_qa: {hasattr(mock_memory, \\\"retrieval_qa\\\")}')\n    \n    # Call get_answer\n    result = get_answer('test question')\n    print(f'Result: {result}')\n    print(f'get_memory_instance called: {mock_get_memory.called}')\n    \n    if mock_get_memory.called:\n        print('get_memory_instance was called')\n        print(f'retrieval_qa called: {mock_memory.retrieval_qa.called}')\n    else:\n        print('get_memory_instance was NOT called - this is the problem!')\n\")",
      "Bash(TESTING=1 PYTHONPATH=/mnt/c/taly/ai-system python3 -c \"\nfrom tools.memory import get_answer\nfrom unittest.mock import patch, MagicMock\n\nprint('Testing get_answer with correct patch...')\n\nwith patch('tools.memory.get_memory_instance') as mock_get_memory:\n    mock_memory = MagicMock()\n    mock_memory.retrieval_qa.return_value = 'Test response'\n    mock_get_memory.return_value = mock_memory\n    \n    print('Mock setup complete')\n    \n    # Call get_answer\n    result = get_answer('test question')\n    print(f'Result: {result}')\n    print(f'get_memory_instance called: {mock_get_memory.called}')\n    print(f'retrieval_qa called: {mock_memory.retrieval_qa.called}')\n    \n    if mock_memory.retrieval_qa.called:\n        print('SUCCESS: retrieval_qa was called')\n        print(f'retrieval_qa called with: {mock_memory.retrieval_qa.call_args}')\n    else:\n        print('FAIL: retrieval_qa was NOT called')\n\")",
      "Bash(TESTING=1 python3 -m tests.run_tests --quick)",
      "Bash(TESTING=1 PYTHONPATH=/mnt/c/taly/ai-system python3 tests/test_memory_config.py)",
      "Bash(TESTING=1 PYTHONPATH=/mnt/c/taly/ai-system python3 -c \"\n# Test HITL blueprint creation  \ntry:\n    from api.hitl_routes import create_hitl_blueprint\n    \n    blueprint = create_hitl_blueprint()\n    print('✓ HITL blueprint created successfully')\n    print(f'Blueprint name: {blueprint.name}')\n    print(f'Blueprint URL prefix: {blueprint.url_prefix}')\n    \nexcept Exception as e:\n    print(f'✗ HITL blueprint creation failed: {e}')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(mv:*)",
      "Bash(cp:*)"
    ],
    "deny": []
  }
}