#!/usr/bin/env python3
"""
Demo script for Step 5.3 ‚Äî QA Agent Execution (Automated Validation)

This script demonstrates the QA execution system that triggers when tasks reach QA_PENDING state.
"""

import sys
import json
import tempfile
import shutil
from pathlib import Path

# Add project root to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from orchestration.qa_execution import QAExecutionEngine
from orchestration.langgraph_qa_integration import LangGraphQAIntegration
from tools.logger import setup_logger


def create_demo_task_output(temp_dir: Path) -> str:
    """Create a demo task output structure for testing"""
    task_id = "BE-07"
    task_dir = temp_dir / task_id
    task_dir.mkdir(parents=True)
    
    # Create code directory with sample files
    code_dir = task_dir / "code"
    code_dir.mkdir()
    
    # Sample Python service file
    (code_dir / "customer_service.py").write_text("""
# Customer Service Implementation
# Generated by Backend Agent for task BE-07

from typing import List, Dict, Any, Optional
import logging

class CustomerService:
    \"\"\"Customer service layer for Supabase integration\"\"\"
    
    def __init__(self, supabase_client):
        self.client = supabase_client
        self.logger = logging.getLogger(__name__)
    
    def get_customer(self, customer_id: str) -> Optional[Dict[str, Any]]:
        \"\"\"Retrieve customer by ID\"\"\"
        try:
            response = self.client.table('customers').select('*').eq('id', customer_id).execute()
            return response.data[0] if response.data else None
        except Exception as e:
            self.logger.error(f"Failed to get customer {customer_id}: {e}")
            return None
    
    def create_customer(self, customer_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        \"\"\"Create new customer\"\"\"
        try:
            response = self.client.table('customers').insert(customer_data).execute()
            return response.data[0] if response.data else None
        except Exception as e:
            self.logger.error(f"Failed to create customer: {e}")
            return None
    
    def update_customer(self, customer_id: str, updates: Dict[str, Any]) -> bool:
        \"\"\"Update customer information\"\"\"
        try:
            response = self.client.table('customers').update(updates).eq('id', customer_id).execute()
            return len(response.data) > 0
        except Exception as e:
            self.logger.error(f"Failed to update customer {customer_id}: {e}")
            return False
    
    def list_customers(self, limit: int = 100) -> List[Dict[str, Any]]:
        \"\"\"List all customers with pagination\"\"\"
        try:
            response = self.client.table('customers').select('*').limit(limit).execute()
            return response.data or []
        except Exception as e:
            self.logger.error(f"Failed to list customers: {e}")
            return []
""")
    
    # Sample TypeScript service file  
    (code_dir / "order_service.ts").write_text("""
// Order Service Implementation
// Generated by Backend Agent for task BE-07

import { SupabaseClient } from '@supabase/supabase-js';

export interface Order {
    id: string;
    user_id: string;
    status: 'pending' | 'confirmed' | 'shipped' | 'delivered' | 'cancelled';
    total_amount: number;
    created_at: string;
    updated_at: string;
}

export class OrderService {
    constructor(private supabaseClient: SupabaseClient) {}
    
    /**
     * Get orders for a specific user
     */
    async getOrdersByUser(userId: string): Promise<Order[]> {
        try {
            const { data, error } = await this.supabaseClient
                .from('orders')
                .select('*')
                .eq('user_id', userId)
                .order('created_at', { ascending: false });
            
            if (error) throw error;
            return data || [];
        } catch (error) {
            console.error('Failed to get user orders:', error);
            return [];
        }
    }
    
    /**
     * Create a new order
     */
    async createOrder(orderData: Omit<Order, 'id' | 'created_at' | 'updated_at'>): Promise<Order | null> {
        try {
            const { data, error } = await this.supabaseClient
                .from('orders')
                .insert(orderData)
                .select()
                .single();
                
            if (error) throw error;
            return data;
        } catch (error) {
            console.error('Failed to create order:', error);
            return null;
        }
    }
    
    /**
     * Update order status
     */
    async updateOrderStatus(orderId: string, status: Order['status']): Promise<boolean> {
        try {
            const { error } = await this.supabaseClient
                .from('orders')
                .update({ status, updated_at: new Date().toISOString() })
                .eq('id', orderId);
                
            if (error) throw error;
            return true;
        } catch (error) {
            console.error('Failed to update order status:', error);
            return false;
        }
    }
    
    /**
     * Get order by ID
     */
    async getOrder(orderId: string): Promise<Order | null> {
        try {
            const { data, error } = await this.supabaseClient
                .from('orders')
                .select('*')
                .eq('id', orderId)
                .single();
                
            if (error) throw error;
            return data;
        } catch (error) {
            console.error('Failed to get order:', error);
            return null;
        }
    }
}
""")
    
    return task_id


def demo_qa_execution():
    """Demonstrate QA execution functionality"""
    logger = setup_logger("step_5_3_demo")
    
    print("üîç Step 5.3 ‚Äî QA Agent Execution Demo")
    print("="*50)
    
    # Create temporary workspace
    temp_dir = Path(tempfile.mkdtemp())
    logger.info(f"Created temporary workspace: {temp_dir}")
    
    try:
        # Create demo task output
        task_id = create_demo_task_output(temp_dir)
        print(f"‚úÖ Created demo task output for: {task_id}")
        
        # Initialize QA execution engine
        qa_engine = QAExecutionEngine(str(temp_dir))
        print("‚úÖ Initialized QA execution engine")
        
        # Execute QA validation
        print(f"\nüîÑ Executing QA validation for task: {task_id}")
        qa_report = qa_engine.execute_qa_for_task(task_id)
        
        # Display results
        print(f"\nüìä QA Validation Results:")
        print(f"Status: {qa_report['status']}")
        print(f"Tests Passed: {qa_report['tests_passed']}")
        print(f"Tests Failed: {qa_report['tests_failed']}")
        print(f"Coverage: {qa_report['coverage']:.1f}%")
        print(f"Issues Found: {len(qa_report['issues'])}")
        
        if qa_report['issues']:
            print("\n‚ö†Ô∏è Issues Detected:")
            for i, issue in enumerate(qa_report['issues'], 1):
                print(f"  {i}. [{issue['severity'].upper()}] {issue['message']}")
        
        # Verify report was saved
        report_file = temp_dir / task_id / "qa_report.json"
        if report_file.exists():
            print(f"‚úÖ QA report saved to: qa_report.json")
        
        # Demo LangGraph integration
        print(f"\nüîÑ Testing LangGraph integration")
        qa_integration = LangGraphQAIntegration(str(temp_dir))
        
        integration_result = qa_integration.handle_qa_pending_state(task_id, {"agent": "backend"})
        
        print(f"üìä LangGraph Integration Results:")
        print(f"Current State: {integration_result['current_state']}")
        print(f"Next State: {integration_result['next_state']}")
        print(f"Transition Reason: {integration_result.get('reason', 'N/A')}")
        
        # Show file structure
        print(f"\nüìÅ Generated File Structure:")
        for file_path in sorted(temp_dir.rglob("*")):
            if file_path.is_file():
                relative_path = file_path.relative_to(temp_dir)
                print(f"  {relative_path}")
        
        print(f"\n‚úÖ Step 5.3 Demo completed successfully!")
        return True
        
    except Exception as e:
        logger.error(f"Demo failed: {str(e)}")
        print(f"‚ùå Demo failed: {str(e)}")
        return False
        
    finally:
        # Cleanup
        shutil.rmtree(temp_dir)
        logger.info("Cleaned up temporary workspace")


def demo_cli_usage():
    """Demonstrate CLI usage examples"""
    print(f"\nüñ•Ô∏è CLI Usage Examples:")
    print("="*30)
    
    examples = [
        "# Run QA validation for a task",
        "python cli/qa_execution_cli.py --task BE-07",
        "",
        "# Run with verbose output", 
        "python cli/qa_execution_cli.py --task BE-07 --verbose",
        "",
        "# Test LangGraph integration",
        "python cli/qa_execution_cli.py --task BE-07 --test-langgraph",
        "",
        "# Export report to JSON",
        "python cli/qa_execution_cli.py --task BE-07 --export qa_report.json",
        "",
        "# Use with custom outputs directory",
        "python cli/qa_execution_cli.py --task BE-07 --outputs-dir /custom/path"
    ]
    
    for example in examples:
        print(example)


def main():
    """Main demo function"""
    print("üöÄ Starting Step 5.3 ‚Äî QA Agent Execution Demo")
    print("This demo showcases the automated validation system for LangGraph tasks")
    print()
    
    # Run the main demo
    success = demo_qa_execution()
    
    # Show CLI examples
    demo_cli_usage()
    
    print(f"\nüéØ Implementation Summary:")
    print("- ‚úÖ QA execution engine with automated validation")
    print("- ‚úÖ LangGraph integration for state transitions") 
    print("- ‚úÖ Comprehensive test generation and coverage")
    print("- ‚úÖ Static analysis with pylint and eslint")
    print("- ‚úÖ JSON report format matching specification")
    print("- ‚úÖ CLI interface for manual validation")
    print("- ‚úÖ Complete test suite for validation")
    
    return 0 if success else 1


if __name__ == "__main__":
    exit(main())
