#!/bin/bash
# SOTA Project Pre-commit Hook
# Location: .git/hooks/pre-commit
# Make executable: chmod +x .git/hooks/pre-commit

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
MAX_EXECUTION_TIME=30
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)

# Skip hooks if commit message contains [skip-hooks]
if git rev-parse --verify HEAD >/dev/null 2>&1; then
    if git log --format=%B -n 1 | grep -q '\[skip-hooks\]'; then
        echo -e "${YELLOW}⚡ Skipping pre-commit hooks as requested${NC}"
        exit 0
    fi
fi

# Skip for merge commits
if [ -f .git/MERGE_HEAD ]; then
    echo -e "${BLUE}🔀 Merge commit detected, skipping validation${NC}"
    exit 0
fi

# Check if we have Python files to validate
if [ -z "$STAGED_FILES" ]; then
    echo -e "${GREEN}✅ No Python files to validate${NC}"
    exit 0
fi

echo -e "${BLUE}🚀 SOTA Pre-commit Validation Starting...${NC}"
echo -e "${BLUE}📁 Files to validate: $(echo $STAGED_FILES | wc -w)${NC}"

# Function to show progress
show_progress() {
    local current=$1
    local total=$2
    local task=$3
    local width=20
    local progress=$((current * width / total))

    printf "\r${BLUE}[$current/$total] $task "
    printf '█%.0s' $(seq 1 $progress)
    printf '░%.0s' $(seq $((progress + 1)) $width)
    printf "${NC}"
}

# 1. Ruff Linting with Auto-fix
echo -e "\n${YELLOW}🔍 Step 1: Ruff Linting & Auto-fix${NC}"
if command -v ruff &> /dev/null; then
    show_progress 1 4 "Running Ruff linter..."

    # Try to auto-fix issues
    if ! ruff check --fix $STAGED_FILES 2>/dev/null; then
        echo -e "\n${RED}❌ Ruff found issues that couldn't be auto-fixed${NC}"
        echo -e "${YELLOW}💡 Run: ruff check --fix . && git add .${NC}"
        exit 1
    fi

    # Re-stage fixed files
    git add $STAGED_FILES 2>/dev/null || true
    echo -e "\n${GREEN}✅ Ruff validation passed${NC}"
else
    echo -e "\n${YELLOW}⚠️  Ruff not found, installing...${NC}"
    pip install ruff --quiet || {
        echo -e "${RED}❌ Failed to install Ruff${NC}"
        exit 1
    }
fi

# 2. Import Sorting Check
echo -e "\n${YELLOW}📦 Step 2: Import Sorting Validation${NC}"
show_progress 2 4 "Checking import order..."

if command -v isort &> /dev/null; then
    if ! isort --check-only --diff $STAGED_FILES; then
        echo -e "\n${YELLOW}🔧 Auto-fixing import order...${NC}"
        isort $STAGED_FILES
        git add $STAGED_FILES
    fi
    echo -e "\n${GREEN}✅ Import sorting validated${NC}"
else
    echo -e "\n${YELLOW}⚠️  Installing isort...${NC}"
    pip install isort --quiet
fi

# 3. Type Checking for Critical Modules
echo -e "\n${YELLOW}🔍 Step 3: Type Checking (Critical Modules)${NC}"
show_progress 3 4 "Running MyPy checks..."

CRITICAL_MODULES="agents/ orchestration/ utils/"
CRITICAL_FILES=$(echo $STAGED_FILES | tr ' ' '\n' | grep -E "^(agents|orchestration|utils)/" || true)

if [ ! -z "$CRITICAL_FILES" ] && command -v mypy &> /dev/null; then
    if ! mypy $CRITICAL_FILES --ignore-missing-imports --no-error-summary 2>/dev/null; then
        echo -e "\n${YELLOW}⚠️  Type checking found issues in critical modules${NC}"
        echo -e "${YELLOW}💡 Consider fixing type annotations for better code quality${NC}"
        # Don't fail on type errors, just warn
    fi
    echo -e "\n${GREEN}✅ Type checking completed${NC}"
fi

# 4. Fast Unit Tests (Changed modules only)
echo -e "\n${YELLOW}🧪 Step 4: Fast Unit Tests${NC}"
show_progress 4 4 "Running relevant tests..."

# Find test files for changed modules
TEST_FILES=""
for file in $STAGED_FILES; do
    test_file=$(echo $file | sed 's|^src/||' | sed 's|\.py$|_test.py|' | sed 's|^|tests/test_|')
    if [ -f "$test_file" ]; then
        TEST_FILES="$TEST_FILES $test_file"
    fi
done

if [ ! -z "$TEST_FILES" ] && command -v pytest &> /dev/null; then
    echo -e "\n${BLUE}🧪 Running tests for: $TEST_FILES${NC}"
    if ! timeout 20s pytest $TEST_FILES -q --tb=short; then
        echo -e "\n${RED}❌ Tests failed for changed modules${NC}"
        echo -e "${YELLOW}💡 Fix failing tests before committing${NC}"
        exit 1
    fi
    echo -e "\n${GREEN}✅ All relevant tests passed${NC}"
fi

# Final summary
echo -e "\n${GREEN}🎉 Pre-commit validation completed successfully!${NC}"
echo -e "${GREEN}📊 Validated $(echo $STAGED_FILES | wc -w) Python files${NC}"
echo -e "${BLUE}⏱️  Total time: ${SECONDS}s (limit: ${MAX_EXECUTION_TIME}s)${NC}"

if [ $SECONDS -gt $MAX_EXECUTION_TIME ]; then
    echo -e "${YELLOW}⚠️  Validation took longer than expected${NC}"
fi

exit 0
